// Generated by .NET Reflector from \sc822\Website\Bin\Sitecore.Speak.Applications.dll
namespace Sitecore.Speak.Applications
{
  using Sitecore;
  using Sitecore.Data;
  using Sitecore.Data.Items;
  using Sitecore.Diagnostics;
  using Sitecore.Mvc.Presentation;
  using Sitecore.Web;
  using Sitecore.Web.PageCodes;
  using System;
  using System.Net;
  using System.Runtime.CompilerServices;
  using System.Xml.Linq;

  public class InsertLinkDialog : PageCodeBase
  {
    private string targetActiveBrowserItemId = "{C5FA4571-37B3-472C-BDA1-0FADC2D2EFA7}";
    private string targetCustomItemId = "{07CF2A84-9C22-4E85-8F3F-C301AADF5218}";
    private string targetNewBrowserItemId = "{02A6C72E-17BB-48C5-8D35-AF9C494ED6BA}";

    private static string GetXmlAttributeValue(XElement element, string attrName)
    {
      if (element.Attribute(attrName) == null)
      {
        return string.Empty;
      }
      return element.Attribute(attrName).Value;
    }

    public override void Initialize()
    {
      SelectMediaDialog.RedirectOnItembucketsDisabled(ClientHost.Items.GetItem("{D4B72406-67B0-4C8F-AD49-A589B112AAAA}"));
      this.ReadQueryParamsAndUpdatePlaceholders();
    }

    private void ReadQueryParamsAndUpdatePlaceholders()
    {
      string queryString = WebUtil.GetQueryString("ro");
      string str2 = WebUtil.GetQueryString("hdl");
      if (!string.IsNullOrEmpty(queryString) && (queryString != "{0}"))
      {
        if (ItemUri.IsItemUri(queryString))
        {
          ItemUri uri = ItemUri.Parse(queryString);
          Item rootItem = ClientHost.Items.GetItem(uri.GetPathOrId());
          if (rootItem == null)
          {
            rootItem = ClientHost.Databases.Database.GetRootItem();
          }
          this.DataSource.Parameters["RootItemId"] = rootItem.ID.ToString();
        }
        else
        {
          Item item = ClientHost.Items.GetItem(queryString);
          if (item == null)
          {
            item = ClientHost.Databases.Database.GetRootItem();
          }
          this.DataSource.Parameters["RootItemId"] = item.ID.ToString();
        }
      }
      this.InsertAnchorButton.Parameters["Click"] = string.Format(this.InsertAnchorButton.Parameters["Click"], WebUtility.UrlEncode(queryString), WebUtility.UrlEncode(str2));
      this.InsertEmailButton.Parameters["Click"] = string.Format(this.InsertEmailButton.Parameters["Click"], WebUtility.UrlEncode(queryString), WebUtility.UrlEncode(str2));
      this.TreeViewToggleButton.Parameters["Click"] = string.Format(this.TreeViewToggleButton.Parameters["Click"], WebUtility.UrlEncode(queryString), WebUtility.UrlEncode(str2));
      string text = string.Empty;
      if (str2 != string.Empty)
      {
        text = UrlHandle.Get()["va"];
      }
      if (text != string.Empty)
      {
        XElement element = XElement.Parse(text);
        if (GetXmlAttributeValue(element, "linktype") == "internal")
        {
          this.TextDescription.Parameters["Text"] = GetXmlAttributeValue(element, "text");
          this.AltText.Parameters["Text"] = GetXmlAttributeValue(element, "title");
          this.StyleClass.Parameters["Text"] = GetXmlAttributeValue(element, "class");
          this.QueryString.Parameters["Text"] = GetXmlAttributeValue(element, "querystring");
          this.SetupTargetDropbox(element);
        }
      }
    }

    private void SetupTargetDropbox(XElement fieldContent)
    {
      string targetNewBrowserItemId;
      string xmlAttributeValue = GetXmlAttributeValue(fieldContent, "target");
      if (xmlAttributeValue.Equals("_blank", StringComparison.OrdinalIgnoreCase))
      {
        targetNewBrowserItemId = this.TargetNewBrowserItemId;
      }
      else if (string.IsNullOrWhiteSpace(xmlAttributeValue))
      {
        targetNewBrowserItemId = this.TargetActiveBrowserItemId;
      }
      else
      {
        targetNewBrowserItemId = this.TargetCustomItemId;
        this.CustomUrl.Parameters["Text"] = xmlAttributeValue;
      }
      this.TargetLoadedValue.Parameters["Text"] = targetNewBrowserItemId;
    }

    public Rendering AltText { get; set; }

    public Rendering CustomUrl { get; set; }

    public Rendering DataSource { get; set; }

    public Rendering InsertAnchorButton { get; set; }

    public Rendering InsertEmailButton { get; set; }

    public Rendering QueryString { get; set; }

    public Rendering StyleClass { get; set; }

    public Rendering Target { get; set; }

    public string TargetActiveBrowserItemId
    {
      get
      {
        return this.targetActiveBrowserItemId;
      }
      set
      {
        Assert.ArgumentNotNull(value, "value");
        this.targetActiveBrowserItemId = value;
      }
    }

    public string TargetCustomItemId
    {
      get
      {
        return this.targetCustomItemId;
      }
      set
      {
        Assert.ArgumentNotNull(value, "value");
        this.targetCustomItemId = value;
      }
    }

    public Rendering TargetLoadedValue { get; set; }

    public string TargetNewBrowserItemId
    {
      get
      {
        return this.targetNewBrowserItemId;
      }
      set
      {
        Assert.ArgumentNotNull(value, "value");
        this.targetNewBrowserItemId = value;
      }
    }

    public Rendering TextDescription { get; set; }

    public Rendering TreeViewToggleButton { get; set; }
  }
}
